#include <cstring>
#include <iostream>
#include <limits>

#include "s21_matrix_oop.h"

int main() {
  S21Matrix c(3);
  /* const double array[9] = {1, 2, 1, 6, -1, 0, -1, -2 , -1}; */
  /* const double array[25] = {9, 3, 9, 7, 2, 9, 2, 6, 7, 1, 4, 1, 0, 8, 7, 2,
   * 4, 9, 0, 1, 8, 4, 1, 2, 0}; */
  /* std::memcpy(c.matrix_, array, sizeof(double) * 25); */
  /* double content = 9; */
  /* for (int i = 1; i <= 3; i++) { */
  /*   for (int j = 1; j <= 3; j++) { */
  /*     c(i, j) = content++; */
  /*   } */
  /* } */
  /* const double array[121] = {0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
   * 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
   * 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,
   * 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
   * 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0,
   * 0, 1, 0, 0, 0}; */
  /* for (int i = 0; i < 121; i++) { */
  /*   c.matrix_[i] = array[i]; */
  /* } */
  /* c(0, 0) = 1; */
  /* c(1, 0) = 0; */
  /* c(2, 0) = 0; */
  /* c(3, 0) = 0; */
  /* c(4, 0) = 0; */
  /* c(5, 0) = 1; */
  /* c(6, 0) = 1; */
  /* c(7, 0) = 1; */
  /* c(8, 0) = 1; */
  /* c(9, 0) = 0; */
  /* c(10, 0) = 1; */
  /* c(0, 1) = 0; */
  /* c(1, 1) = 0; */
  /* c(2, 1) = 1; */
  /* c(3, 1) = 1; */
  /* c(4, 1) = 1; */
  /* c(5, 1) = 0; */
  /* c(6, 1) = 1; */
  /* c(7, 1) = 0; */
  /* c(8, 1) = 1; */
  /* c(9, 1) = 1; */
  /* c(10, 1) = 0; */
  /* c(0, 2) = 0; */
  /* c(1, 2) = 1; */
  /* c(2, 2) = 1; */
  /* c(3, 2) = 1; */
  /* c(4, 2) = 0; */
  /* c(5, 2) = 0; */
  /* c(6, 2) = 1; */
  /* c(7, 2) = 0; */
  /* c(8, 2) = 0; */
  /* c(9, 2) = 0; */
  /* c(10, 2) = 0; */
  /* c(0, 3) = 0; */
  /* c(1, 3) = 0; */
  /* c(2, 3) = 1; */
  /* c(3, 3) = 1; */
  /* c(4, 3) = 1; */
  /* c(5, 3) = 1; */
  /* c(6, 3) = 1; */
  /* c(7, 3) = 1; */
  /* c(8, 3) = 1; */
  /* c(9, 3) = 1; */
  /* c(10, 3) = 1; */
  /* c(0, 4) = 1; */
  /* c(1, 4) = 0; */
  /* c(2, 4) = 1; */
  /* c(3, 4) = 0; */
  /* c(4, 4) = 1; */
  /* c(5, 4) = 1; */
  /* c(6, 4) = 1; */
  /* c(7, 4) = 0; */
  /* c(8, 4) = 1; */
  /* c(9, 4) = 1; */
  /* c(10, 4) = 0; */
  /* c(0, 5) = 0; */
  /* c(1, 5) = 1; */
  /* c(2, 5) = 0; */
  /* c(3, 5) = 1; */
  /* c(4, 5) = 0; */
  /* c(5, 5) = 0; */
  /* c(6, 5) = 0; */
  /* c(7, 5) = 0; */
  /* c(8, 5) = 1; */
  /* c(9, 5) = 1; */
  /* c(10, 5) = 0; */
  /* c(0, 6) = 0; */
  /* c(1, 6) = 0; */
  /* c(2, 6) = 1; */
  /* c(3, 6) = 1; */
  /* c(4, 6) = 1; */
  /* c(5, 6) = 1; */
  /* c(6, 6) = 0; */
  /* c(7, 6) = 1; */
  /* c(8, 6) = 1; */
  /* c(9, 6) = 0; */
  /* c(10, 6) = 0; */
  /* c(0, 7) = 0; */
  /* c(1, 7) = 0; */
  /* c(2, 7) = 0; */
  /* c(3, 7) = 1; */
  /* c(4, 7) = 0; */
  /* c(5, 7) = 1; */
  /* c(6, 7) = 0; */
  /* c(7, 7) = 0; */
  /* c(8, 7) = 1; */
  /* c(9, 7) = 0; */
  /* c(10, 7) = 0; */
  /* c(0, 8) = 1; */
  /* c(1, 8) = 0; */
  /* c(2, 8) = 0; */
  /* c(3, 8) = 0; */
  /* c(4, 8) = 0; */
  /* c(5, 8) = 1; */
  /* c(6, 8) = 1; */
  /* c(7, 8) = 0; */
  /* c(8, 8) = 1; */
  /* c(9, 8) = 0; */
  /* c(10, 8) = 0; */
  /* c(0, 9) = 1; */
  /* c(1, 9) = 1; */
  /* c(2, 9) = 1; */
  /* c(3, 9) = 0; */
  /* c(4, 9) = 0; */
  /* c(5, 9) = 1; */
  /* c(6, 9) = 0; */
  /* c(7, 9) = 1; */
  /* c(8, 9) = 0; */
  /* c(9, 9) = 0; */
  /* c(10, 9) = 1; */
  /* c(0, 10) = 0; */
  /* c(1, 10) = 1; */
  /* c(2, 10) = 0; */
  /* c(3, 10) = 1; */
  /* c(4, 10) = 0; */
  /* c(5, 10) = 1; */
  /* c(6, 10) = 1; */
  /* c(7, 10) = 0; */
  /* c(8, 10) = 1; */
  /* c(9, 10) = 1; */
  /* c(10, 10) = 0; */

  c(0, 0) = 9;
  c(1, 0) = 8;
  c(2, 0) = 7;
  c(0, 1) = 7;
  c(1, 1) = 7;
  c(2, 1) = 7;
  c(0, 2) = 9;
  c(1, 2) = 2;
  c(2, 2) = 6;
  c(0, 0) = 2;
  c(1, 0) = 1;
  c(2, 0) = 1;
  c(0, 1) = 2;
  c(1, 1) = 1;
  c(2, 1) = 1;
  c(0, 2) = 7;
  c(1, 2) = 7;
  c(2, 2) = 6;
  c(0, 0) = 1;
  c(1, 0) = 3;
  c(2, 0) = 2;
  c(0, 1) = 2;
  c(1, 1) = 2;
  c(2, 1) = 4;
  c(0, 2) = 3;
  c(1, 2) = 8;
  c(2, 2) = 9;
  S21Matrix copy_m = c;
  std::cout << "Copied matrix" << std::endl;
  copy_m.PrintMatrix();
  /* S21Matrix a(3, 5); */
  /* a(3, 5) = 3; */
  /* a(1, 3) = 8; */
  /* S21Matrix b(a); */
  /* b(3, 1) = 4; */
  /* a.SubMatrix(b); */
  /* b.MulNumber(9); */
  /* c.SumMatrix(a); */
  /* std::cout << "Matrix A:" << std::endl; */
  /* a.PrintMatrix(); */
  /* std::cout << std::endl << "Matrix B:" << std::endl; */
  /* b.PrintMatrix(); */
  /* std::cout << std::endl << "Matrix C:" << std::endl; */
  /* S21Matrix b(c.getCols()); */
  /* std::cout << "Original: " << std::endl; */
  /* c.PrintMatrix(); */
  /* c.setCols(1); */
  /* c.setCols(19); */
  /* std::cout << "Cols: " << std::endl; */
  /* c.PrintMatrix(); */
  /* c.setRows(19); */
  /* b=c+c; */
  std::cout << "C:" << std::endl;
  c.PrintMatrix();

  S21Matrix mult_m = c.InverseMatrix();
  std::cout << "Inverse matrix:" << std::endl;
  mult_m.PrintMatrix();
  /* std::cout << "B:" << std::endl; */
  /* b.PrintMatrix(); */
  /* c.MulMatrix(b); */
  /* std::cout << std::endl << "Matrix C*B:" << std::endl; */
  /* c.PrintMatrix(); */
  /* S21Matrix d = b.Transpose(); */
  /* std::cout << std::endl << "Matrix D, B transposed:" << std::endl; */
  /* d.PrintMatrix(); */
  /* S21Matrix e = d.Transpose(); */
  /* std::cout << std::endl << "Matrix E, D transposed:" << std::endl; */
  /* e.PrintMatrix(); */
  /* double edet = c.Determinant(); */
  /* std::cout << std::endl << " Determinant matrix C test: " << c.Determinant()
   * << std::endl; */
  /* std::cout << "Rows: " << std::endl; */
  /* c.PrintMatrix(); */
  /* c.PrintMatrix(); */
  /* std::cout << std::endl; */
  /* std::cout << std::endl << "Method check: " << a.EqMatrix(b) << std::endl;
   */
  /* std::cout << std::endl << "Operator check: " << (a == b) << std::endl; */
  return 0;
}

/* 9 7 9 4 1 0 2 5 8 */
/* 8 7 2 3 3 1 7 8 9 */
/* 7 7 6 0 5 8 1 0 9 */
/* 9 3 9 0 9 6 9 5 1 */
/* 9 2 5 7 0 3 7 4 5 */
/* 5 6 0 0 1 6 4 7 7 */
/* 7 2 8 3 2 8 6 8 3 */
/* 2 9 9 5 4 8 6 2 6 */
/* 7 1 2 8 3 2 3 6 9 */
// LOOP
/* 0 0 9 2 8 3 */
/* 1 8 6 7 9 0 */
/* 1 8 7 4 0 1 */
/* 4 8 6 3 0 6 */
/* 4 8 2 0 0 9 */
/* 1 2 5 7 5 9 */
// LOOP
/* 1 0 1 0 0 1 0 0 */
/* 1 0 0 0 0 1 1 1 */
/* 0 1 1 1 0 0 0 0 */
/* 1 1 0 0 0 0 1 0 */
/* 1 0 0 0 0 0 0 1 */
/* 1 1 1 0 0 1 0 1 */
/* 1 0 0 0 1 0 0 0 */
/* 1 0 0 1 1 1 0 1 */
// LOOP
/* 1 1 0 */
/* 0 0 0 */
/* 0 0 1 */
// LOOP
/* 0 0 0 */
/* 1 1 1 */
/* 1 1 0 */
// LOOP
/* 1 1 1 */
/* 1 1 1 */
/* 1 1 1 */
// zaLOOP
/* 2 2 7 */
/* 1 1 7 */
/* 1 1 6 */
/* Wrong */
/* 1 1 1 1 0 1 0 1 */
/* 1 1 0 0 1 1 0 0 */
/* 1 1 1 0 0 1 1 0 */
/* 1 1 0 0 1 0 1 1 */
/* 1 1 0 1 0 0 1 0 */
/* 1 1 1 1 1 0 1 0 */
/* 0 1 0 1 0 1 1 1 */
/* 0 1 0 0 0 1 1 0 */
/* Zero */
/* 1 1 1 1 */
/* 1 0 0 0 */
/* 1 0 0 1 */
/* 0 0 1 0 */
/* Error */
/* 1 0 0 0 1 0 0 0 1 1 0 */
/* 0 0 1 0 0 1 0 0 0 1 1 */
/* 0 1 1 1 1 0 1 0 0 1 0 */
/* 0 1 1 1 0 1 1 1 0 0 1 */
/* 0 1 0 1 1 0 1 0 0 0 0 */
/* 1 0 0 1 1 0 1 1 1 1 1 */
/* 1 1 1 1 1 0 0 0 1 0 1 */
/* 1 0 0 1 0 0 1 0 0 1 0 */
/* 1 1 0 1 1 1 1 1 1 0 1 */
/* 0 1 0 1 1 1 0 0 0 0 1 */
/* 1 0 0 1 0 0 0 0 0 1 0 */
/* Not zero in Eigen */
/* 0 1 0 1 1 0 0 1 0 0 1 */
/* 1 1 0 0 1 1 1 1 1 1 0 */
/* 0 0 0 1 1 1 0 1 0 0 0 */
/* 0 1 1 1 0 0 0 0 1 0 0 */
/* 1 1 1 0 1 0 1 1 0 1 0 */
/* 0 1 0 0 1 1 0 0 0 1 0 */
/* 0 0 1 0 0 1 1 0 0 1 1 */
/* 1 1 1 1 1 1 1 0 1 1 1 */
/* 1 1 0 1 1 0 0 0 1 0 0 */
/* 0 1 1 1 0 1 0 1 1 0 1 */
/* 0 1 1 0 1 0 0 1 0 0 0 */
